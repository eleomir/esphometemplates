# TODO:
# Global Variables: https://community.home-assistant.io/t/substitutions-in-lambda/172717
# Linear Temp control: https://www.speaktothegeek.co.uk/2023/01/esphome-fan-v3-variable-speed-pwm-and-temperature-control/
# Another temp control: https://github.com/patrickcollins12/esphome-fan-controller
# Label Fans
# Make more holes in the case
# Join 12v and 5v grounds on chip (fan startup was weird)
# Minimum speed (~20%) for safety
# Always turn on fans on boot on boot

substitutions:
  fan_01_auto_enable: 'false'
  fan_01_temp_low: '30.0'
  fan_01_temp_high: '36.0'
  fan_01_speed_low: '5.0'
  fan_01_speed_high: '35.0'

globals:
  # Fan 1: Enable Auto Controller
  - id: fan1_en
    type: bool
    initial_value: ${fan_01_auto_enable}
    restore_value: yes
  # Low Temp
  - id: fan1_t1
    type: float
    initial_value: ${fan_01_temp_low}
    restore_value: yes
  # High temp
  - id: fan1_t2
    type: float
    initial_value: ${fan_01_temp_high}
    restore_value: yes
  # Low Speed %
  - id: fan1_s1
    type: float
    initial_value: ${fan_01_speed_low}
    restore_value: yes
  # High Speed %
  - id: fan1_s2
    type: float
    initial_value: ${fan_01_speed_high}
    restore_value: yes

script:
  - id: set_fan_state
    then:
      lambda: |-
        if (id(fan1_en) == false) {
          return;
        }

        // Fan entity
        auto fan = id(${fan_control_id_prefix}01);
        
        // Current Temp
        auto tc = id(sensor_tcurrent).state;
        
        // High Temp
        auto th = id(fan1_t2);
        
        // Low Temp
        auto tl = id(fan1_t1);
        
        // High Speed
        auto sh = id(fan1_s2);
        
        // Low Speed
        auto sl = id(fan1_s1);
        
        // Resulting Speed (start with low speed)
        auto sc = sl;
        
        if (tc <= tl) {
          // We have a lower then min temp. Keep it low.
          sc = sl;
        }
        else if (tc >= th) {
          // if we have a higher temp, set it to max speed.
          sc = id(fan1_s2);
        }
        else {
          // Let's scale the speed sc accoding to the temp scale.
          auto t_range = th - tl; // e.g. 35-28 = 7
          auto t_offset = tc - tl; // e.g. 30-28 = 2
          auto t_percent = t_offset / t_range; // e.g. 2 / 7 = 0.2857

          auto s_range = sh - sl; // e.g. 80-35 = 45
          auto s_offset = t_percent * s_range; // e.g. 0.2857 * 45 = 12.85
          sc = sl + s_offset; // 35 + 12.85 = 47.85
        }

        // Make the call with the latest value of sc.
        auto call = fan->turn_on();
        call.set_speed(sc);
        call.perform();