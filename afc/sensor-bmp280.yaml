i2c:
  scl: ${i2c_scl}
  sda: ${i2c_sda}
  scan: true
  frequency: 50kHz
  id: bus_a

sensor:
  - platform: bmp280_i2c
    i2c_id: bus_a
    address: 0x76
    update_interval: 10s
    iir_filter: 4x
    temperature:
      name: "Airflow Temperature"
      id: 'sensor_tcurrent'
      device_class: temperature
      icon: 'mdi:thermometer'
      web_server:
        sorting_group_id: sg_sensor
      on_value_range:
        - below: 27.0
          then:
            - light.turn_on:
                id: led_status
                red: 20%
                green: 40%
                blue: 0%
                effect: "Temperature Pulse"
        - above: 27.0
          below: 36.0
          then:
            - light.turn_on:
                id: led_status
                red: 100%
                green: 40%
                blue: 0%
                effect: "Temperature Pulse"
        - above: 36.0
          then:
            - light.turn_on:
                id: led_status
                red: 80%
                green: 0%
                blue: 0%
                effect: "Temperature Pulse"
      on_value:
        then:
          - script.execute: set_fan_state
    pressure:
      name: "Atmospheric Pressure"
      icon: 'mdi:altimeter'
      device_class: atmospheric_pressure
      web_server:
        sorting_group_id: sg_sensor

globals:
  # Low Temp
  - id: fan1_t1
    type: float
    initial_value: '28.0'
    restore_value: no
  # High temp
  - id: fan1_t2
    type: float
    initial_value: '35.0'
    restore_value: no
  # Low Speed %
  - id: fan1_s1
    type: float
    initial_value: '35.0'
    restore_value: no
  # High Speed %
  - id: fan1_s2
    type: float
    initial_value: '80.0'
    restore_value: no

script:
  - id: set_fan_state
    then:
      lambda: |-
        // Fan entity
        auto fan = id(${fan_control_id_prefix}01);
        
        // Current Temp
        auto tc = id(sensor_tcurrent).state;
        
        // High Temp
        auto th = id(fan1_t2);
        
        // Low Temp
        auto tl = id(fan1_t1);
        
        // High Speed
        auto sh = id(fan1_s2);
        
        // Low Speed
        auto sl = id(fan1_s1);
        
        // Resulting Speed (start with low speed)
        auto sc = sl;
        
        if (tc <= tl) {
          // We have a lower then min temp. Keep it low.
          sc = sl;
        }
        else if (tc >= th) {
          // if we have a higher temp, set it to max speed.
          sc = id(fan1_s2);
        }
        else {
          // Let's scale the speed sc accoding to the temp scale.
          auto t_range = th - tl; // e.g. 35-28 = 7
          auto t_offset = tc - tl; // e.g. 30-28 = 2
          auto t_percent = t_offset / t_range; // e.g. 2 / 7 = 0.2857

          auto s_range = sh - sl; // e.g. 80-35 = 45
          auto s_offset = t_percent * s_range; // e.g. 0.2857 * 45 = 12.85
          sc = sl + s_offset; // 35 + 12.85 = 47.85
        }

        // Make the call with the latest value of sc.
        auto call = fan->turn_on();
        call.set_speed(sc);
        call.perform();