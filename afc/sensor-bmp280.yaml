i2c:
  scl: ${i2c_scl}
  sda: ${i2c_sda}
  scan: true
  frequency: 50kHz
  id: bus_a

sensor:
  - platform: bmp280_i2c
    i2c_id: bus_a
    address: 0x76
    update_interval: 30s
    iir_filter: 4x
    temperature:
      name: "Airflow Temperature"
      id: 'sensor_tcurrent'
      device_class: temperature
      icon: 'mdi:thermometer'
      web_server:
        sorting_group_id: sg_sensor
      on_value_range:
        - below: 27.0
          then:
            - light.turn_on:
                id: led_status
                red: 20%
                green: 40%
                blue: 0%
                effect: "Temperature Pulse"
        - above: 27.0
          below: 36.0
          then:
            - light.turn_on:
                id: led_status
                red: 100%
                green: 40%
                blue: 0%
                effect: "Temperature Pulse"
        - above: 36.0
          then:
            - light.turn_on:
                id: led_status
                red: 80%
                green: 0%
                blue: 0%
                effect: "Temperature Pulse"
      on_value:
        then:
          - script.execute: set_fan_state
    pressure:
      name: "Atmospheric Pressure"
      icon: 'mdi:altimeter'
      device_class: atmospheric_pressure
      web_server:
        sorting_group_id: sg_sensor

globals:
  # Low Temp
  - id: fan1_t1
    type: float
    initial_value: '28.0'
    restore_value: no
  # High temp
  - id: fan1_t2
    type: float
    initial_value: '35.0'
    restore_value: no
  # Low Speed %
  - id: fan1_s1
    type: float
    initial_value: '35.0'
    restore_value: no
  # High Speed %
  - id: fan1_s2
    type: float
    initial_value: '80.0'
    restore_value: no

script:
  - id: set_fan_state
    then: !lambda |-
      auto fan = id(${fan_control_id_prefix}01);
      if (!fan.state) {
        auto call fan.turn_on();
        call.set_speed(id(fan1_s1));
        call.perform();
      }

      auto call fan.turn_on();
      call.set_speed(id(fan1_s1));
      call.perform();